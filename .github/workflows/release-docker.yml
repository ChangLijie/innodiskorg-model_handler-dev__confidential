name: Build, Push Docker Image and Release

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  read-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read `docs/version.json`
        id: get_version
        run: echo "version=$(jq -r '.version' docs/version.json)" >> "$GITHUB_OUTPUT"

  build-and-push:
    runs-on: ubuntu-latest
    needs: read-version
    env:
      VERSION: ${{ needs.read-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t innodiskorg/model_handler:${VERSION} .
          docker tag innodiskorg/model_handler:${VERSION} innodiskorg/model_handler:latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push innodiskorg/model_handler:${VERSION}
          docker push innodiskorg/model_handler:latest

  create-release:
    runs-on: ubuntu-latest
    needs: [read-version, build-and-push]
    env:
      VERSION: ${{ needs.read-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate Categorized Release Notes
        id: release_notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # 取得從上一次 Release 以來的 Commit
          if [[ -z "$LAST_TAG" ]]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
          fi

          # 初始化分類
          FEATURES=""
          FIXES=""
          DOCS=""
          REFACTOR=""

          # 逐行讀取 Commit Message 並分類
          while IFS= read -r line; do
            if [[ $line =~ ^feat: ]]; then
              FEATURES+="- ${line:5}\n"
            elif [[ $line =~ ^fix: ]]; then
              FIXES+="- ${line:4}\n"
            elif [[ $line =~ ^docs: ]]; then
              DOCS+="- ${line:5}\n"
            elif [[ $line =~ ^refactor: ]]; then
              REFACTOR+="- ${line:9}\n"
            fi
          done <<< "$COMMITS"

          # 生成 Release Notes
          RELEASE_NOTES=""
          if [[ ! -z "$FEATURES" ]]; then
            RELEASE_NOTES+="## ✨ Features\n$FEATURES\n"
          fi
          if [[ ! -z "$FIXES" ]]; then
            RELEASE_NOTES+="## 🐛 Bug Fixes\n$FIXES\n"
          fi
          if [[ ! -z "$DOCS" ]]; then
            RELEASE_NOTES+="## 📝 Documentation\n$DOCS\n"
          fi
          if [[ ! -z "$REFACTOR" ]]; then
            RELEASE_NOTES+="## 🔨 Refactoring\n$REFACTOR\n"
          fi

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo -e "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
